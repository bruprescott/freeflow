#!/usr/bin/python
import os;
import struct;
import crc32
import time

def main():

   # List of source files used with the full featured flow sensor that includes a display, encoder, etc
   fullsrc = Split( 'main.c cpu.c uart.c sercmd.c string.c binary.c ascii.c buzzer.c encoder.c ' +
                    'io.c timer.c loop.c adc.c trace.c vars.c pressure.c display.c sprintf.c ui.c ' +
                    'calc.c store.c flash.c usb.c filter.c autooffset.c math.c' );

   # List of source files used on the mini version of the firmware.  This drops the user I/O and just
   # uses the sensor as a component for a larger system.  It adds a slave I2C interface.
   minisrc = Split( 'main.c cpu.c uart.c sercmd.c string.c binary.c ascii.c ' +
                    'io.c timer.c loop.c adc.c trace.c vars.c pressure.c sprintf.c ' +
                    'calc.c store.c flash.c usb.c filter.c autooffset.c math.c' );

#   bootsrc = Split( 'main.c cpu.c uart.c sercmd.c string.c binary.c ascii.c ' +
#                    'io.c timer.c flash.c usb.c firmware.c ' );
   bootsrc = minisrc + Split( 'firmware.c' );

   asmsrc = Split( 'startup.s' )

   prefix = 'arm-none-eabi'

   env = Environment();
   env['ENV'] = os.environ
   env['AS'] = prefix+'-as'
   env['CC'] = prefix+'-gcc'
   env['LINK'] = prefix+'-ld'
   env['CPPPATH'] = 'inc'
   env['CFLAGS'] = '-mthumb -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard -O2 -g -Wall -std=gnu99 -fno-builtin -ffunction-sections -fdata-sections -fsingle-precision-constant -fno-strict-aliasing -mno-unaligned-access'
   env['ASFLAGS'] = '-mthumb -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard '

   env['CCCOMSTR'] = '***** Compiling $TARGET'
   env['ASCOMSTR'] = '***** Assembling $TARGET'
   env['LINKCOMSTR'] = '***** Linking $TARGET'

   BuildFirmware( env, 'full', fullsrc, asmsrc, flags='-DFULL',  link='main.x' )
   BuildFirmware( env, 'mini', minisrc, asmsrc, flags='-DMINI',  link='main.x' )
   BuildFirmware( env, 'boot', bootsrc, asmsrc, flags='-DBOOT',  link='boot.x' )

def BuildFirmware( env, name, srcList, asmList, flags='', link='linker.x' ):
   tmp = env.Clone()

   objdir = 'obj/' + name
   elf = '%s.elf' % name
   cff = '%s.cff' % name

   tmp['LINKFLAGS'] = " -T'%s' -Map=%s.map --entry ResetVect" % (link, name)

   tmp['CFLAGS'] += ' ' + flags

   tmp.VariantDir( objdir+'/c', 'c', duplicate=0 )
   tmp.VariantDir( objdir+'/asm', 'asm', duplicate=0 )

   src = sorted([ '%s/c/%s' % (objdir,x) for x in srcList ] + [ '%s/asm/%s' % (objdir,x) for x in asmList ] );

   t = tmp.Program( elf, src );
   Clean( t, name+'.map' )

def SrcList( directory, files ):
   return [ '%s/%s' % (directory,x) for x in Split(files)]

main()


